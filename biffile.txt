#include "fs.h" #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <unistd.h> #include <fcntl.h> #include <sys/mman.h> int *fat = NULL; DirectoryElement *root = NULL; DirectoryElement *current_directory = NULL; DirectoryElement *parent_directory = NULL; void *fs_start = NULL; int root_size = 0; int fat_size = 0; int num_directories = 0; int init_fs(const char* fileImage, int size){ if(!fileImage){ handle_error_ret("\n#### ERROR! File image not found! ####\n", -1); } if(size <= 0){ handle_error_ret("\n#### ERROR! Size is less than or equal to 0! ####\n", -1); } int fd = open(fileImage, O_RDWR | O_CREAT, 0666); if(fd == -1){ handle_error_ret("\n#### ERROR! Couldn't open the fileImage! ####\n", -1); } if(ftruncate(fd, size) == -1){ free_fs(); handle_error_ret("\n#### ERROR! Couldn't truncate the fileImage! ####\n", -1); } fs_start = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0); if(fs_start == MAP_FAILED){ free_fs(); handle_error_ret("\n#### ERROR! Couldn't map the fileImage! ####\n", -1); } fat = fs_start; root = (DirectoryElement*) (fs_start + CLUSTER_SIZE); memset(fat, 0, FAT_ELEMENTS * 4); printf("FAT initialized!\n"); memset(root, 0, (size - CLUSTER_SIZE)); printf("Root initialized!\n"); root_size = sizeof(DirectoryElement); fat_size = FAT_ELEMENTS; current_directory = root; current_directory->size = root_size; current_directory->is_directory = 1; current_directory->start_block = 0; fat[current_directory->start_block] = -1; strncpy(current_directory->name, "ROOT", MAX_FILE_NAME); parent_directory = current_directory; num_directories++; return 0; } void print_fat(int items){ if(items > fat_size){ items = fat_size; } for(int i = 0; i < items; i++){ printf("FAT[%d]: %d\n", i, fat[i]); } } int free_fat_block(){ for(int i = 2; i < fat_size; i++){ if(fat[i] == 0){ return i; } } return -1; } FileHandler* create_file(const char *name){ if(!name){ handle_error_ret("\n#### ERROR! File name not found! ####\n", NULL); } if(strlen(name) > MAX_FILE_NAME){ handle_error_ret("\n#### ERROR! File name is too long! ####\n", NULL); } for(int i = 0; i < current_directory->size; i++){ if(strcmp(current_directory[i].name, name) == 0){ handle_error_ret("\n#### ERROR! File with this name already exists! ####\n", NULL); } } int free_block = free_fat_block(); if(free_block == -1){ handle_error_ret("\n#### ERROR! No free blocks in the FAT! ####\n", NULL); } FileHandler *fh = (FileHandler*)malloc(sizeof(FileHandler)); if(!fh){ handle_error_ret("\n#### ERROR! Couldn't allocate memory for the file handler! ####\n", NULL); } fh->pos = 0; fh->directory = current_directory; strncpy(fh->file_name, name, MAX_FILE_NAME-1); fh->file_name[MAX_FILE_NAME-1] = '\0'; for(int i = 0; i < current_directory->size; i++){ if(current_directory[i].size == 0 && current_directory[i].name[0] == '\0' && current_directory[i].is_directory == 0){ strncpy(current_directory[i].name, name, MAX_FILE_NAME-2); current_directory[i].name[MAX_FILE_NAME-1] = '\0'; current_directory[i].start_block = free_block; fat[free_block] = -2; current_directory->size = sizeof(DirectoryElement)*i; current_directory[i].is_directory = 0; current_directory[i].fh = fh; break; } } return fh; } int erase_file(const char *name){ if(!name){ handle_error_ret("\n#### ERROR! File name not found! ####\n", -1); } for(int i = 1; i < current_directory->size; i++){ if(strcmp(current_directory[i].name, name) == 0){ int block = current_directory[i].start_block; printf("Erasing file: %s\n", name); while(fat[block] != 0){ if(fat[block] == -2){ fat[block] = 0; printf("Freed block: %u\n", block); break; } int next_block = fat[block]; fat[block] = 0; printf("Freed block: %u\n", block); block = next_block; } memset(&current_directory[i], 0, sizeof(DirectoryElement)); printf("File %s erased successfully!\n", name); return 0; } } return -1; } int write_file(FileHandler *fh, const char *data){ if(!fh){ handle_error_ret("\n#### ERROR! File handler not found! ####\n", -1); } if(!data){ handle_error_ret("\n#### ERROR! Data not found! ####\n", -1); } int data_size = strlen(data); int data_pos = fh->pos; int rem_size = data_size; int bytes_written = 0; DirectoryElement *file = NULL; int is_in_current_directory = 0; if(strncmp(current_directory->name, fh->directory->name, MAX_FILE_NAME) == 0){ is_in_current_directory = 1; } if(is_in_current_directory){ for(int i = 0; i < current_directory->size; i++){ if(strncmp(current_directory[i].name, fh->file_name, MAX_FILE_NAME) == 0 && current_directory[i].is_directory == 0){ file = &current_directory[i]; file->current_block = file->start_block; break; } } }else{ handle_error_ret("\n#### ERROR! File not found in the current directory! ####\n", -1); } int block = file->start_block; while(rem_size > 0){ if(fat[block] == -2){ int new_block = free_fat_block(); if(new_block == -1){ handle_error_ret("\n#### ERROR! No free blocks in the FAT! ####\n", -1); } fat[block] = new_block; file->current_block = block; fat[new_block] = -2; } char *block_data = (char*)(fs_start + CLUSTER_SIZE * (file->current_block)); int write_size = CLUSTER_SIZE - data_pos; if(write_size > rem_size){ write_size = rem_size; } memcpy(block_data + data_pos, data + bytes_written, write_size); bytes_written += write_size; rem_size -= write_size; data_pos = 0; fh->pos += write_size; if(rem_size > 0){ int new_block = free_fat_block(); if(new_block == -1){ handle_error_ret("\n#### ERROR! No free blocks in the FAT! ####\n", -1); } fat[file->current_block] = new_block; file->current_block = new_block; fat[new_block] = -2; } } file->size += bytes_written; return bytes_written; } int read_file(FileHandler *fh, char*buff, int buff_size){ if(!fh){ handle_error_ret("\n#### ERROR! File handler not found! ####\n", -1); } if(!buff){ handle_error_ret("\n#### ERROR! Buffer not found! ####\n", -1); } int data_pos = fh->pos; int rem_size = buff_size; int bytes_read = 0; DirectoryElement *file = NULL; int is_in_current_directory = 0; if(strncmp(current_directory->name, fh->directory->name, MAX_FILE_NAME) == 0){ is_in_current_directory = 1; } if(is_in_current_directory){ for(int i = 0; i < current_directory->size; i++){ if(strncmp(current_directory[i].name, fh->file_name, MAX_FILE_NAME) == 0 && current_directory[i].is_directory == 0){ file = &current_directory[i]; file->current_block = file->start_block; break; } } }else{ handle_error_ret("\n#### ERROR! File not found in the current directory! ####\n", -1); } if(!file){ handle_error_ret("\n#### ERROR! File not found! ####\n", -1); } int block = file->start_block; while(rem_size > 0 && fat[block] != -2){ char *block_data = (char*)(fs_start + CLUSTER_SIZE * (file->current_block)); int read_size = CLUSTER_SIZE - data_pos; if(read_size > rem_size){ read_size = rem_size; } memcpy(buff + bytes_read, block_data + data_pos, read_size); bytes_read += read_size; rem_size -= read_size; data_pos = 0; fh->pos += read_size; } if (bytes_read < buff_size){ buff[bytes_read] = '\0'; } return bytes_read; } int seek_file(FileHandler *fh, int p
